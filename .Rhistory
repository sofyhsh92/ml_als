setwd("C:/Users/user/Documents/ml_als")
library(dplyr)
library(tidyr)
## new data (length : 18 months, ALSFRS_Delta 0 ~ 548 // data points >= 6 // last point alsfrs_delta >= 180)
alsfrs.ori <- read.csv("alsfrs.ori.csv")
colnames(alsfrs.ori) <- alsfrs.ori[1, ]
alsfrs <- cbind(subject_id = alsfrs.ori[, 1], alsfrs.ori[, 13:561])
rm(alsfrs.ori)
#deleting "X" from each subject_id
alsfrs$subject_id <- as.character(alsfrs$subject_id)
for (i in 2:nrow(alsfrs)) {
alsfrs$subject_id[i] <- sub("^X", "", alsfrs$subject_id[i])
}
#data points >= 6
c <- rep(TRUE, nrow(alsfrs))
for(i in 2:nrow(alsfrs)) {
if(sum(!is.na(alsfrs[i, ])) <= 6) {
c[i] <- FALSE
}
}
alsfrs <- alsfrs[c, ]
#last point alsfrs_delta >= 180
c <- rep(TRUE, nrow(alsfrs))
als180 <- cbind(subject_id = alsfrs[, 1], alsfrs[, 182:550])
for(i in 2:nrow(alsfrs)) {
if(sum(!is.na(als180[i, ])) <= 1 ) {
c[i] <- FALSE
}
}
rm(als180)
alsfrs <- alsfrs[c, ]
rm(i)
rm(c)
rownames(alsfrs) <- alsfrs[, 1]
alsfrs[, 1] <- NULL
#error due to all same ALSFRS
h <- rep(NA, nrow(alsfrs))
h[1] <- 1
for(i in 2:nrow(alsfrs)) {
if (!(sum(!duplicated(alsfrs[i, ][!is.na(alsfrs[i, ])])) == 1)) {
h[i] <- i
}
}
h <- h[!is.na(h)]
alsfrs <- alsfrs[h, ]
#calculation of relative errors of Weibull and linear
#omit i = 330, 2121, 4032, 4140, 4480 (singular gradient)
alsfrs <- alsfrs[-c(330, 2121, 4032, 4140, 4480), ]
b <- 0
rel.err.diff <- 0
library(minpack.lm)
for (i in 2:nrow(alsfrs)) {
x <- alsfrs[1, ]
y <- alsfrs[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
rmse.w <- sqrt( fit.w$m$deviance() / length(x) )
fit.l <- lm(y ~ x)
res.l <- summary(fit.l)$residuals
rmse.l <- sqrt(sum(res.l^2)/length(x))
rel.err.w <- rmse.w / sd(y)
rel.err.l <- rmse.l / sd(y)
rel.err.diff[i] <- rel.err.l - rel.err.w
b[i] <- as.numeric(fit.w$m$getPars()[3])
}
b_and_rel.err <- data.frame(cbind(subject_id = as.numeric(rownames(alsfrs)[-1]), b = b[-1], rel.err.diff = rel.err.diff[-1]))
quantile(rel.err.diff, 0.7)
plot(density(b_and_rel.err[,3]), main = "relative error difference (linear - Weibull)")
abline(v=0.06926119, col = "red")
#labeling based on density plot of relative error difference
label <- rep("E", nrow(alsfrs))
label[1] <- NA
for(i in 2:nrow(alsfrs)) {
if (rel.err.diff[i] > 0.06926119) {
label[i] <- "W"
}
}
table(label)
b_and_rel.err$label <- NULL
b_and_rel.err <- mutate(b_and_rel.err, label = label[-1])
plot(density(filter(b_and_rel.err, label == "W")$b), xlim = c(-1, 15), main = "b")
abline(v=1.55, col = "red")
for(i in 1:nrow(b_and_rel.err)){
if(b_and_rel.err$label[i] == "W" & b_and_rel.err$b[i] > 1.55){
b_and_rel.err$label[i] <- "W_concave"
} else if (b_and_rel.err$label[i] == "W" & b_and_rel.err$b[i] <= 1.55){
b_and_rel.err$label[i] <- "W_convex"
}
}
table(b_and_rel.err$label)
alsfrs_label <- b_and_rel.err[, c(1, 4)]
View(alsfrs_label)
als_label$label <- NULL
als_label <- mutate(als_label, label = c(NA, b_and_rel.err$label))
alsfrs.eq <- filter(als_label, label == "E")
alsfrs.eq["label"] <- NULL
alsfrs.x <- as.numeric(als_label[1, -1])
alsfrs.eq <- alsfrs.eq[-1, ]
alsfrs.eq <- alsfrs.eq[sample(nrow(alsfrs.eq)), ]
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS",  xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
als_label <- mutate(alsfrs, label = c(NA, b_and_rel.err$label))
alsfrs.eq <- filter(als_label, label == "E")
alsfrs.eq["label"] <- NULL
alsfrs.x <- as.numeric(als_label[1, -1])
alsfrs.eq <- alsfrs.eq[-1, ]
alsfrs.eq <- alsfrs.eq[sample(nrow(alsfrs.eq)), ]
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS",  xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
View(alsfrs.eq)
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]), xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
x
y
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]), xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.eq <- alsfrs.eq[sample(nrow(alsfrs.eq)), ]
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]), xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.eq <- alsfrs.eq[sample(nrow(alsfrs.eq)), ]
for (i in 1:nrow(alsfrs.eq)) {
x <- alsfrs.x
y <- alsfrs.eq[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]), xlim = c(0, 548), ylim = c(0,40) )
fit.l <- lm(y ~ x)
lines(x, fitted(fit.l), col = "blue")
print(i)
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.wcc <- filter(als_label, label == "W_concave")
alsfrs.wcc["label"] <- NULL
alsfrs.x <- as.numeric(als_label[1, -1])
alsfrs.wcc <- alsfrs.wcc[-1, ]
alsfrs.wcc <- alsfrs.wcc[sample(nrow(alsfrs.wcc)), ]
for (i in 1:nrow(alsfrs.wcc)) {
x <- alsfrs.x
y <- alsfrs.wcc[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]),  xlim = c(0, 548), ylim = c(0,40) )
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
lines(x, fitted(fit.w), col = "green")
print(i)
fit.w$m$trace()
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.wcc <- alsfrs.wcc[sample(nrow(alsfrs.wcc)), ]
for (i in 1:nrow(alsfrs.wcc)) {
x <- alsfrs.x
y <- alsfrs.wcc[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]),  xlim = c(0, 548), ylim = c(0,40) )
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
lines(x, fitted(fit.w), col = "green")
print(i)
fit.w$m$trace()
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.wcc <- alsfrs.wcc[sample(nrow(alsfrs.wcc)), ]
for (i in 1:nrow(alsfrs.wcc)) {
x <- alsfrs.x
y <- alsfrs.wcc[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]),  xlim = c(0, 548), ylim = c(0,40) )
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
lines(x, fitted(fit.w), col = "green")
print(i)
fit.w$m$trace()
invisible(readline(prompt="Press [enter] to continue"))
}
alsfrs.wcv <- filter(als_label, label == "W_convex")
alsfrs.wcv["label"] <- NULL
alsfrs.x <- as.numeric(als_label[1, -1])
alsfrs.wcv <- alsfrs.wcv[-1, ]
alsfrs.wcv <- alsfrs.wcv[sample(nrow(alsfrs.wcv)), ]
for (i in 1:nrow(alsfrs.wcv)) {
x <- alsfrs.x
y <- alsfrs.wcv[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
plot(x = x, y = y, xlab = "ALSFRS_Delta", ylab = "ALSFRS", main = paste("subject_id = ", rownames(alsfrs.eq)[i]),  xlim = c(0, 548), ylim = c(0,40) )
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
lines(x, fitted(fit.w), col = "red")
print(i)
fit.w$m$trace()
invisible(readline(prompt="Press [enter] to continue"))
}
