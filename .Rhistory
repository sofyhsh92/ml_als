alsfrs <- alsfrs[h, ]
#calculation of relative errors of Weibull and linear
#omit i = 330, 2121, 4032, 4140, 4480 (singular gradient)
alsfrs <- alsfrs[-c(330, 2121, 4032, 4140, 4480), ]
rel.err.diff <- 0
library(minpack.lm)
for (i in 2:nrow(alsfrs)) {
x <- alsfrs[1, ]
y <- alsfrs[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
rmse.w <- sqrt( fit.w$m$deviance() / length(x) )
fit.l <- lm(y ~ x)
res.l <- summary(fit.l)$residuals
rmse.l <- sqrt(sum(res.l^2)/length(x))
rel.err.w <- rmse.w / sd(y)
rel.err.l <- rmse.l / sd(y)
rel.err.diff[i] <- rel.err.l - rel.err.w
}
###script 13
## new data (length : 18 months, ALSFRS_Delta 0 ~ 548 // data points >= 6 // last point alsfrs_delta >= 180)
alsfrs.ori <- read.csv("alsfrs.ori.csv")
colnames(alsfrs.ori) <- alsfrs.ori[1, ]
alsfrs <- cbind(subject_id = alsfrs.ori[, 1], alsfrs.ori[, 13:561])
rm(alsfrs.ori)
#deleting "X" from each subject_id
alsfrs$subject_id <- as.character(alsfrs$subject_id)
for (i in 2:nrow(alsfrs)) {
alsfrs$subject_id[i] <- sub("^X", "", alsfrs$subject_id[i])
}
#data points >= 6
c <- rep(TRUE, nrow(alsfrs))
for(i in 2:nrow(alsfrs)) {
if(sum(!is.na(alsfrs[i, ])) <= 6) {
c[i] <- FALSE
}
}
alsfrs <- alsfrs[c, ]
#last point alsfrs_delta >= 180
c <- rep(TRUE, nrow(alsfrs))
als180 <- cbind(subject_id = alsfrs[, 1], alsfrs[, 182:550])
for(i in 2:nrow(alsfrs)) {
if(sum(!is.na(als180[i, ])) <= 1 ) {
c[i] <- FALSE
}
}
rm(als180)
alsfrs <- alsfrs[c, ]
rownames(alsfrs) <- alsfrs[, 1]
alsfrs[, 1] <- NULL
#error due to all same ALSFRS
h <- rep(NA, nrow(alsfrs))
h[1] <- 1
for(i in 2:nrow(alsfrs)) {
if (!(sum(!duplicated(alsfrs[i, ][!is.na(alsfrs[i, ])])) == 1)) {
h[i] <- i
}
}
h <- h[!is.na(h)]
alsfrs <- alsfrs[h, ]
#calculation of relative errors of Weibull and linear
#omit i = 330, 2121, 4032, 4140, 4480 (singular gradient)
alsfrs <- alsfrs[-c(330, 2121, 4032, 4140, 4480), ]
rel.err.diff <- 0
library(minpack.lm)
for (i in 2:nrow(alsfrs)) {
x <- alsfrs[1, ]
y <- alsfrs[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
rmse.w <- sqrt( fit.w$m$deviance() / length(x) )
fit.l <- lm(y ~ x)
res.l <- summary(fit.l)$residuals
rmse.l <- sqrt(sum(res.l^2)/length(x))
rel.err.w <- rmse.w / sd(y)
rel.err.l <- rmse.l / sd(y)
rel.err.diff[i] <- rel.err.l - rel.err.w
}
rel.err.diff <- 0
b <- 0
for (i in 2:nrow(alsfrs)) {
x <- alsfrs[1, ]
y <- alsfrs[i, ]
x <- x[!is.na(y)]
y <- y[!is.na(y)]
x <- x+1
fit.w <- nlsLM(y ~ A*exp(1)^(-( ((c^2) * x) ^ b )), start = list(A = 40, c= 1, b = 0.1), control = nls.lm.control(maxiter = 125))
rmse.w <- sqrt( fit.w$m$deviance() / length(x) )
fit.l <- lm(y ~ x)
res.l <- summary(fit.l)$residuals
rmse.l <- sqrt(sum(res.l^2)/length(x))
rel.err.w <- rmse.w / sd(y)
rel.err.l <- rmse.l / sd(y)
rel.err.diff[i] <- rel.err.l - rel.err.w
b[i] <- as.numeric(fit.w$m$getPars()[3])
}
b_and_rel.err <- data.frame(cbind(subject_id = as.numeric(rownames(alsfrs)[-1]), b = b[-1], rel.err.diff = rel.err.diff[-1]))
quantile(rel.err.diff, 0.7)
plot(density(b_and_rel.err[,3]), main = "relative error difference (linear - Weibull)")
abline(v=0.06926119, col = "red")
label <- rep("E", nrow(alsfrs))
label[1] <- NA
for(i in 2:nrow(alsfrs)) {
if (rel.err.diff[i] > 0.06926119) {
label[i] <- "W"
}
}
table(label)
b_and_rel.err$label <- NULL
b_and_rel.err <- mutate(b_and_rel.err, label = label[-1])
plot(density(filter(b_and_rel.err, label == "W")$b), xlim = c(-1, 15), main = "b")
library(dplyr)
label <- rep("E", nrow(alsfrs))
label[1] <- NA
for(i in 2:nrow(alsfrs)) {
if (rel.err.diff[i] > 0.06926119) {
label[i] <- "W"
}
}
table(label)
b_and_rel.err$label <- NULL
b_and_rel.err <- mutate(b_and_rel.err, label = label[-1])
plot(density(filter(b_and_rel.err, label == "W")$b), xlim = c(-1, 15), main = "b")
abline(v=1.55, col = "red")
for(i in 1:nrow(b_and_rel.err)){
if(b_and_rel.err$label[i] == "W" & b_and_rel.err$b[i] > 1.55){
b_and_rel.err$label[i] <- "W_concave"
} else if (b_and_rel.err$label[i] == "W" & b_and_rel.err$b[i] <= 1.55){
b_and_rel.err$label[i] <- "W_convex"
}
}
table(b_and_rel.err$label)
alsfrs_label <- b_and_rel.err[, c(1, 4)]
alsfrs_data_mm <- read.csv("alsfrs.csv")
#merge Q5a and Q5b
for(i in 1:nrow(alsfrs_data_mm)) {
if(is.na(alsfrs_data_mm$Q5a_Cutting_without_Gastrostomy[i])) {
alsfrs_data_mm$Q5a_Cutting_without_Gastrostomy[i] <- alsfrs_data_mm$Q5b_Cutting_with_Gastrostomy[i]
}
}
#drop Q5b
alsfrs_data_mm$Q5b_Cutting_with_Gastrostomy <- NULL
#merge Q10 and R1
for(i in 1:nrow(alsfrs_data_mm)) {
if(is.na(alsfrs_data_mm$Q10_Respiratory[i])) {
alsfrs_data_mm$Q10_Respiratory[i] <- alsfrs_data_mm$R_1_Dyspnea[i]
}
}
#drop everything except Q1~Q10 and ALSFRS_Delta
alsfrs_data_mm[ , 13:19] <- NULL
#filter for 0~90 ALSFRS_Delta
library(dplyr)
alsfrs_data_mm <- filter(alsfrs_data_mm, ALSFRS_Delta <= 90 & ALSFRS_Delta >= 0)
alsfrs_data_mm <- na.omit(alsfrs_data_mm)
length(unique(alsfrs_data_mm$subject_id))
#6506 patients
colnames(alsfrs_data_mm) <- c("subject_id", "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q10", "ALSFRS_Delta")
alsfrs_data_mm <- alsfrs_data_mm %>%
group_by(subject_id) %>%
mutate(Q1_min = min(Q1), Q1_max = max(Q1), Q2_min = min(Q2), Q2_max = max(Q2), Q3_min = min(Q3), Q3_max = max(Q3), Q4_min = min(Q4), Q4_max = max(Q4), Q5_min = min(Q5), Q5_max = max(Q5), Q6_min = min(Q6), Q6_max = max(Q6), Q7_min = min(Q7), Q7_max = max(Q7), Q8_min = min(Q8), Q8_max = max(Q8), Q9_min = min(Q9), Q9_max = max(Q9), Q10_min = min(Q10), Q10_max = max(Q10)) %>%
select(subject_id, Q1_min, Q1_max, Q2_min, Q2_max, Q3_min, Q3_max, Q4_min, Q4_max, Q5_min, Q5_max, Q6_min, Q6_max, Q7_min, Q7_max, Q8_min, Q8_max, Q9_min, Q9_max, Q10_min, Q10_max)
alsfrs_data_mm <- alsfrs_data_mm[!duplicated(alsfrs_data_mm), ]
#done(alsfrs : Q1min ~ Q10min, Q1max ~ Q10max)
write.csv(alsfrs_data_mm, "alsfrs_ml.csv")
###Riluzole
riluzole <- read.csv("Riluzole.csv")
riluzole <- select(riluzole, subject_id, Subject_used_Riluzole)
colnames(riluzole) <- c("subject_id", "riluzole")
#done(riluzole : riluzole)
write.csv(riluzole, "riluzole_ml.csv")
###AlsHistory (Thanks to JKW)
alshistory<-read.csv("AlsHistory_r.csv")
# OnsetSite 변수 추가 과정.
for (i in 1:length(alshistory$subject_id))
{
if (alshistory$Site_of_Onset[i]=="Onset: Bulbar"){
alshistory$Onsetsite[i]="Bulbar"
}
if (alshistory$Site_of_Onset[i]=="Onset: Limb"){
alshistory$Onsetsite[i]="Limb"
}
if (alshistory$Site_of_Onset[i]=="Onset: Limb and Bulbar"){
alshistory$Onsetsite[i]="Limb and Bulbar"
}
if (alshistory$Site_of_Onset[i]=="Onset: Other"){
alshistory$Onsetsite[i]="Other"
}
if (alshistory$Site_of_Onset[i]=="Onset: Spine"){
alshistory$Onsetsite[i]="Limb"
}
if (!is.na(alshistory$Site_of_Onset___Bulbar[i])) {
if (alshistory$Site_of_Onset___Bulbar[i]==1) {
alshistory$Onsetsite[i]="Bulbar"
}
}
if (!is.na(alshistory$Site_of_Onset___Limb[i])) {
if (alshistory$Site_of_Onset___Limb[i]==1) {
alshistory$Onsetsite[i]="Limb"
}
}
if (!is.na(alshistory$Site_of_Onset___Bulbar[i]) & !is.na(alshistory$Site_of_Onset___Limb[i])){
if (alshistory$Site_of_Onset___Bulbar[i]==1 & alshistory$Site_of_Onset___Limb[i]==1) {
alshistory$Onsetsite[i]="Limb and Bulbar"
}
}
}
alshistory$Onsetsite <- factor(alshistory$Onsetsite)
# DiagnosisDelta >0인 것들은 오류일테니 NA처리
alshistory$Diagnosis_Delta[alshistory$Diagnosis_Delta>0]=NA
# Make 'Mode' function
Mode <- function(x){
x <- x[!is.na(x)]
uqx <- unique(x)
uqx[which.max(tabulate(match(x,uqx)))]
}
alshistory <- summarize(group_by(alshistory,subject_id),Onsetsite=Mode(Onsetsite),Onset_Delta=Mode(Onset_Delta),Diagnosis_Delta=Mode(Diagnosis_Delta))
alshistory <- alshistory %>%
mutate(onset_to_diagnosis = Diagnosis_Delta - Onset_Delta) %>%
select(subject_id, Onsetsite, Onset_Delta, onset_to_diagnosis)
#done (alshistory : Onsetsite, Onset_Delta, Diagnosis_Delta \\ NA remains in Onset_Delta, Diagnosis Delta)
write.csv(alshistory, "alshistory_ml.csv")
###demographics
demographics <- read.csv("demographics.csv")
for (i in 1:nrow(demographics)) {
if (!is.na(demographics$Date_of_Birth[i])) {
demographics$Age[i] <- -demographics$Date_of_Birth[i] / 365.25
}
}
demographics <- select(demographics, subject_id, Age, Sex)
demographics <- na.omit(demographics)
demographics$Sex <- droplevels(demographics$Sex)
#done (demographics : Age, Sex)
write.csv(demographics, "demographics_ml.csv")
###vitalsigns
vitalsigns <- read.csv("VitalSigns.csv")
vital <- filter(vitalsigns, Vital_Signs_Delta >= 0 & Vital_Signs_Delta <= 90)
#weight to kg, height to cm (thanks to JKW)
vital$Weight[vital$Weight_Units=="Pounds"] <- vital$Weight[vital$Weight_Units=="Pounds"] * 0.453592
vital$Height[vital$Height_Units=="Inches"] <- vital$Height[vital$Height_Units=="Inches"] * 2.54
#diastolic, systolic pressure
for (i in 1:nrow(vital)) {
if(!is.na(vital$Supine_BP_Diastolic[i])) {
vital$Blood_Pressure_Diastolic[i] <- (vital$Supine_BP_Diastolic[i] + vital$Standing_BP_Diastolic[i]) / 2
vital$Blood_Pressure_Systolic[i] <- (vital$Supine_BP_Systolic[i] + vital$Standing_BP_Systolic[i]) / 2
vital$Pulse[i] <- ( vital$Supine_Pulse[i] + vital$Standing_Pulse[i] ) / 2
}
}
vital_pressure <- select(vital, subject_id, Blood_Pressure_Diastolic, Blood_Pressure_Systolic, Pulse)
vital_pressure <- vital_pressure %>%
group_by(subject_id) %>%
summarize(diastolic_p = mean(Blood_Pressure_Diastolic, na.rm=TRUE),
systolic_p = mean(Blood_Pressure_Systolic, na.rm=TRUE),
heart_rate = mean(Pulse, na.rm=TRUE))
#weight
vital_weight <- vital %>%
select(subject_id, Weight, Vital_Signs_Delta) %>%
filter(Vital_Signs_Delta >=0 & Vital_Signs_Delta <=90) %>%
na.omit() %>%
group_by(subject_id) %>%
mutate(n = n()) %>%
filter(!(n == 1)) %>%
mutate(rank = rank(Vital_Signs_Delta)) %>%
mutate(reverse_rank = rank(-Vital_Signs_Delta))
vital_initial_weight <- vital_weight %>%
filter(rank == 1) %>%
mutate(initial_weight = Weight) %>%
select(subject_id, initial_weight)
vital_last_weight <- vital_weight %>%
filter(reverse_rank == 1) %>%
mutate(last_weight = Weight) %>%
select(subject_id, last_weight)
vital_two_weights <- left_join(vital_initial_weight, vital_last_weight, by ="subject_id")
rm(vital_initial_weight)
rm(vital_last_weight)
vital_weight <- vital_two_weights %>%
mutate(weight_difference_ratio = (initial_weight - last_weight) / initial_weight) %>%
select(subject_id, initial_weight, weight_difference_ratio)
rm(vital_two_weights)
#height
vital_height <- vitalsigns %>%
select(subject_id, Height) %>%
group_by(subject_id) %>%
summarize(height = mean(Height, na.rm=TRUE)) %>%
filter(!is.nan(height))
#respiratory rate
vital_respiratory_rate <- vitalsigns %>%
select(subject_id, Respiratory_Rate) %>%
group_by(subject_id) %>%
summarize(respiratory_rate = mean(Respiratory_Rate, na.rm=TRUE)) %>%
filter(!is.nan(respiratory_rate))
#temperature
vital_temperature <- vitalsigns %>%
select(subject_id, Temperature) %>%
group_by(subject_id) %>%
summarize(temperature = mean(Temperature, na.rm=TRUE)) %>%
filter(!is.nan(temperature))
#done(vitalsigns : height, initial_weight, weight_difference_ratio, diastolic_p, systolic_p, heart_rate, respiratory_rate, temperature)
rm(vital)
rm(vitalsigns)
View(alsfrs_data_mm)
alsfrs_data <- alsfrs
alsfrs_data <- alsfrs_data %>%
group_by(subject_id) %>%
mutate(rank = rank(ALSFRS_Delta)) %>%
filter(rank == 1) %>%
mutate(alsfrs_total = Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8+Q9+Q10) %>%
left_join(alshistory, by = "subject_id") %>%
mutate(preslope = alsfrs_total * 30 / (-Onset_Delta + ALSFRS_Delta) ) %>%
mutate(movement = (Q8 <=1 | Q6 <=1),
swallowing = (Q3 <=1),
communicating = (Q1 <= 1 | Q4 <= 1),
breathing = (Q10 <= 1)) %>%
mutate(mitos = movement + swallowing + communicating + breathing) %>%
select(subject_id, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10, alsfrs_total, mitos, preslope)
colnames(alsfrs_data) <- c("subject_id", "Q1_start", "Q2_start", "Q3_start", "Q4_start", "Q5_start", "Q6_start", "Q7_start", "Q8_start", "Q9_start", "Q10_start", "alsfrs_total", "mitos", "preslope")
alsfrs_data <- left_join(alsfrs_data, alsfrs_last, by = "subject_id")
#done(alsfrs_data : Q1 ~ Q10_start, Q1 ~ Q10_late, alsfrs_total)
View(alsfrs_data)
alsfrs_data <- read.csv("alsfrs.csv")
#merge Q5a and Q5b
for(i in 1:nrow(alsfrs_data)) {
if(is.na(alsfrs_data$Q5a_Cutting_without_Gastrostomy[i])) {
alsfrs_data$Q5a_Cutting_without_Gastrostomy[i] <- alsfrs_data$Q5b_Cutting_with_Gastrostomy[i]
}
}
#drop Q5b
alsfrs_data$Q5b_Cutting_with_Gastrostomy <- NULL
#merge Q10 and R1
for(i in 1:nrow(alsfrs_data)) {
if(is.na(alsfrs_data$Q10_Respiratory[i])) {
alsfrs_data$Q10_Respiratory[i] <- alsfrs_data$R_1_Dyspnea[i]
}
}
#drop everything except Q1~Q10 and ALSFRS_Delta
alsfrs_data[ , 13:19] <- NULL
#filter for 0~90 ALSFRS_Delta
library(dplyr)
alsfrs_data <- filter(alsfrs_data, ALSFRS_Delta <= 90 & ALSFRS_Delta >= 0)
alsfrs_data <- na.omit(alsfrs_data)
length(unique(alsfrs_data$subject_id))
#6506 patients
colnames(alsfrs_data) <- c("subject_id", "Q1", "Q2", "Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q10", "ALSFRS_Delta")
alsfrs_last <- alsfrs_data %>%
group_by(subject_id) %>%
mutate(reverse_rank = rank(-ALSFRS_Delta)) %>%
filter(reverse_rank == 1) %>%
select(subject_id, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10)
colnames(alsfrs_last) <- c("subject_id", "Q1_last", "Q2_last", "Q3_last", "Q4_last", "Q5_last", "Q6_last", "Q7_last", "Q8_last", "Q9_last", "Q10_last")
alsfrs_data <- alsfrs_data %>%
group_by(subject_id) %>%
mutate(rank = rank(ALSFRS_Delta)) %>%
filter(rank == 1) %>%
mutate(alsfrs_total = Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8+Q9+Q10) %>%
left_join(alshistory, by = "subject_id") %>%
mutate(preslope = alsfrs_total * 30 / (-Onset_Delta + ALSFRS_Delta) ) %>%
mutate(movement = (Q8 <=1 | Q6 <=1),
swallowing = (Q3 <=1),
communicating = (Q1 <= 1 | Q4 <= 1),
breathing = (Q10 <= 1)) %>%
mutate(mitos = movement + swallowing + communicating + breathing) %>%
select(subject_id, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10, alsfrs_total, mitos, preslope)
colnames(alsfrs_data) <- c("subject_id", "Q1_start", "Q2_start", "Q3_start", "Q4_start", "Q5_start", "Q6_start", "Q7_start", "Q8_start", "Q9_start", "Q10_start", "alsfrs_total", "mitos", "preslope")
alsfrs_data <- left_join(alsfrs_data, alsfrs_last, by = "subject_id")
View(alsfrs_data)
View(alsfrs_data_mm)
View(alsfrs_data)
alsfrs_data_mm$mitos <- alsfrs_dat$mitos
alsfrs_data_mm$preslope <- alsfrs_dat$preslope
alsfrs_data_mm$mitos <- alsfrs_data$mitos
alsfrs_data_mm$preslope <- alsfrs_data$preslope
View(alsfrs_data)
View(alsfrs_data_mm)
alsfrs_data_mm <- alsfrs_data_mm %>%
left_join(alsfrs_data, by = "subject_id") %>%
select(-c(Q1_start, Q2_start, Q3_start, Q4_start, Q5_start, Q6_start, Q7_start, Q8_start, Q9_start, Q10_start, Q1_last, Q2_last, Q3_last, Q4_last, Q5_last, Q6_last, Q7_last, Q8_last, Q9_last, Q10_last))
View(alsfrs_data_mm)
complete_data <- left_join(alsfrs_label, alsfrs_data_mm, by = "subject_id") %>%
left_join(alshistory, by = "subject_id") %>%
left_join(demographics, by = "subject_id") %>%
left_join(riluzole, by = "subject_id") %>%
left_join(vital_height, by = "subject_id") %>%
left_join(vital_pressure, by = "subject_id") %>%
left_join(vital_respiratory_rate, by = "subject_id") %>%
left_join(vital_temperature, by = "subject_id") %>%
left_join(vital_weight, by = "subject_id")
rm(fit.l)
rm(fit.w)
View(complete_data)
complete_data_conti <- complete_data[, -c(26, 30, 31)]
complete_data_conti_imp <- predict(preProcess(complete_data_conti[, -1], method=c("medianImpute")), complete_data_conti[, -1])
complete_data_imp <- left_join(mutate(complete_data_conti_imp, subject_id = complete_data_conti[, 1]), complete_data[, c(1, 24, 26, 27)], by = "subject_id")
imputed_omitted_data <- na.omit(complete_data_imp)
library(caret)
complete_data_conti <- complete_data[, -c(26, 30, 31)]
complete_data_conti_imp <- predict(preProcess(complete_data_conti[, -1], method=c("medianImpute")), complete_data_conti[, -1])
complete_data_imp <- left_join(mutate(complete_data_conti_imp, subject_id = complete_data_conti[, 1]), complete_data[, c(1, 24, 26, 27)], by = "subject_id")
imputed_omitted_data <- na.omit(complete_data_imp)
View(imputed_omitted_data)
complete_data_conti <- complete_data[, -c(26, 30, 31)]
complete_data_conti_imp <- predict(preProcess(complete_data_conti[, -1], method=c("medianImpute")), complete_data_conti[, -1])
complete_data_imp <- left_join(mutate(complete_data_conti_imp, subject_id = complete_data_conti[, 1]), complete_data[, c(1, 26, 30, 31)], by = "subject_id")
imputed_omitted_data <- na.omit(complete_data_imp)
View(imputed_omitted_data)
model <- train(
label ~.,
data = imputed_omitted_data,
method = "ranger",
tuneLength = 10,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
model
plot(model)
varImp(model)
varImp(model)
names(model)
names(model$modelInfo)
model$modelInfo$varImp()
model$modelInfo$varImp(model)
model <- train(
label ~.,
data = imputed_omitted_data,
method = "ranger",
tuneLength = 10,
importance = TRUE,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
model
plot(model)
model <- train(
label ~.,
data = imputed_omitted_data,
method = "ranger",
tuneLength = 3,
importance = TRUE,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
warnings()
model <- train(
label ~.,
data = imputed_omitted_data,
method = "ranger",
tuneLength = 3,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
model <- train(
label ~.,
data = imputed_omitted_data,
method = "ranger",
tuneLength = 3,
importance = TRUE,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
model
model <- train(
label ~.,
data = imputed_omitted_data,
method = "rf",
tuneLength = 6,
importance = TRUE,
trControl = trainControl(method = "cv", number = 5, verboseIter = TRUE)
)
model
plot(model)
varImp(model)
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1
)
xgb_trcontrol_1 = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
model2 <- train(
label ~.,
data = imputed_omitted_data,
method = "xgbTree",
importance = TRUE,
trControl = xgb_trcontrol_1,
tuneGrid = xgb_grid_1
)
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1,
colsample_bytree = 0.5,
min_child_weight = 5,
subsample = 1
)
xgb_trcontrol_1 = trainControl(
method = "cv",
number = 5,
verboseIter = TRUE
)
model2 <- train(
label ~.,
data = imputed_omitted_data,
method = "xgbTree",
importance = TRUE,
trControl = xgb_trcontrol_1,
tuneGrid = xgb_grid_1
)
model2
plot(model2)
varImp(model2)
